Q1. What is props in a React component?

A. Props is a special keyword in React that stands for properties and is used to pass data from one component to another and mostly from parent component to child component. We can say props is a data carrier or a means to transport data.
Props is a way we pass data or parameters to a component.
Props are similar to function arguments and allow you to transfer information into a React component from a parent component. Props are immutable, meaning they cannot be modified by the component that receives them; only the parent component can update them.

Q2. How do you access props in a React component?

a) Using Function Components:
In function components, props are passed as an argument to the function. Here's an example:

    // Parent Component
    function ParentComponent() {
    const data = "Hello, World!";
    
    return (
        <ChildComponent message={data} />
    );
    }

    // Child Component
    function ChildComponent(props) {
    return <h1>{props.message}</h1>;
    }

In this example, the ChildComponent receives props as an argument and accesses the message prop using props.message.

b) Using Class Components:
In class components, props are accessed via this.props. Here's an example:

import React, { Component } from 'react';

    // Parent Component
    class ParentComponent extends Component {
    render() {
        const data = "Hello, World!";
        
        return (
        <ChildComponent message={data} />
        );
    }
    }

    // Child Component
    class ChildComponent extends Component {
    render() {
        return <h1>{this.props.message}</h1>;
    }
    }

In this example, the ChildComponent accesses the message prop using this.props.message.

Function components are generally preferred in modern React applications due to their simplicity.

Q3. What data types can we pass as props to components?

A. The different data types that we can pass to a component are:
    String
    Number
    Boolean
    Array
    Object
    Function


Q4. What is a propTypes?

PropTypes is a built-in feature in React that allows you to specify the type of data that a component expects to receive as props. This helps ensure that the component gets the right type of data and can warn you if something is wrong during development. By defining propTypes, you can make your components more predictable and easier to debug.

a) Example of using propTypes in a class component:

        import React, { Component } from 'react';
        import PropTypes from 'prop-types';

        class ChildComponent extends Component {
        render() {
            return <h1>{this.props.message}</h1>;
        }
        }

        ChildComponent.propTypes = {
        message: PropTypes.string.isRequired
        };

        export default ChildComponent;

    In this example:
    *PropTypes.string.isRequired* specifies that the *message* prop must be a string and is required for the *ChildComponent* to work properly.

b) Example of using propTypes in a function component:

        import React from 'react';
        import PropTypes from 'prop-types';

        function ChildComponent(props) {
        return <h1>{props.message}</h1>;
        }

        ChildComponent.propTypes = {
        message: PropTypes.string.isRequired
        };

        export default ChildComponent;

    In both examples, if you try to pass a prop of the wrong type or omit a required prop, React will give you a warning in the console during development. This can help you catch errors early and make your code more robust.
    
    While PropTypes is still widely used, newer tools like TypeScript often provide better type checking capabilities directly within the language, reducing the need for external libraries. Consider using TypeScript if you're not already.


Q5. What is a default propTypes?

In React, defaultProps is a mechanism that allows you to set default values for the props of a component. If a parent component does not pass a particular prop, the component will use the default value specified in defaultProps. This is useful for ensuring that your components always have valid values for their props, even if some are not provided.

Example:
        import React, { Component } from 'react';

        class ChildComponent extends Component {
        render() {
            return <h1>{this.props.message}</h1>;
        }
        }

        ChildComponent.defaultProps = {
        message: "Default Message"
        };

        export default ChildComponent;

In this example, if the ParentComponent does not pass a message prop, the ChildComponent will use "Default Message" as the value for this.props.message.

For function components, the syntax is similar:
        import React from 'react';

        function ChildComponent(props) {
        return <h1>{props.message}</h1>;
        }

        ChildComponent.defaultProps = {
        message: "Default Message"
        };

        export default ChildComponent;

By defining defaultProps, you ensure that the component has a fallback value if a prop is missing. This helps improve the robustness and reliability of your React components.

Another example:
        import React from 'react';
        import PropTypes from 'prop-types';

        function MyComponent(props) {
        return (
            <div>
            <h1>{props.title}</h1>
            <p>{props.description}</p>
            </div>
        );
        }

        MyComponent.propTypes = {
        title: PropTypes.string.isRequired,
        description: PropTypes.string
        };

        MyComponent.defaultProps = {
        title: 'Default Title',
        description: 'Default Description'
        };

    In this example, the MyComponent component has two props: title and description. The propTypes object defines the expected types for these props, with title being a required string.

The defaultProps static property is used to define the default values for these props. If the parent component doesn't provide values for title or description, the default values will be used instead.
This is particularly useful when you want to ensure that your component has certain props with specific values, even if they are not provided by the parent component. It can help make your components more robust and easier to use.